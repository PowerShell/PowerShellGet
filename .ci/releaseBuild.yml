# The name of the build that will be seen in mscodehub
name: CompatPowerShellget-Release-$(Build.BuildId)
# how is the build triggered
# since this is a release build, no trigger as it's a manual release
trigger: none

pr:
  branches:
    include:
    - master

# variables to set in the build environment
variables:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  POWERSHELL_TELEMETRY_OPTOUT: 1

# since this build relies on templates, we need access to those
# This needs a service connection in the build to work
# the *name* of the service connection must be the same as the endpoint
resources:
  repositories:
  - repository: ComplianceRepo
    type: github
    endpoint: ComplianceGHRepo
    name: PowerShell/compliance
    # this can be any branch of your choosing
    ref: master

# the stages in this build. There are 2
# the assumption for is that test is done as part of
# CI so we needn't do it here
stages:
- stage: Build
  displayName: Build
  pool:
    name: 1ES
    demands:
    - ImageOverride -equals PSMMS2019-Secure
  jobs:
  - job: Build_Job
    displayName: Build Microsoft.PowerShell.CompatPowerShellGet
    # note the variable reference to ESRP.
    # this must be created in Project -> Pipelines -> Library -> VariableGroups
    # where it describes the link to the SigningServer
    variables:
    - group: ESRP
    steps:
    - checkout: self

    # these are setting vso variables which will be persisted between stages
    - pwsh: |
        $signSrcPath = "$(Build.SourcesDirectory)/CompatPowerShellGet/src"
        dir
        # Set signing src path variable
        $vstsCommandString = "vso[task.setvariable variable=signSrcPath]${signSrcPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"

        $signOutPath = "$(Build.SourcesDirectory)/OSS_Microsoft_CompatPowerShellGet/signed/CompatPowerShellGet"
        $null = New-Item -ItemType Directory -Path $signOutPath
        # Set signing out path variable
        $vstsCommandString = "vso[task.setvariable variable=signOutPath]${signOutPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"

        # Set path variable for guardian codesign validation
        $vstsCommandString = "vso[task.setvariable variable=GDN_CODESIGN_TARGETDIRECTORY]${signOutPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"

        # Get version and create a variable
        $moduleData = Import-PowerShellDataFile "$(Build.SourcesDirectory)/CompatPowerShellGet/src/CompatPowerShellGet.psd1"
        $moduleVersion = $moduleData.ModuleVersion
        $vstsCommandString = "vso[task.setvariable variable=moduleVersion]${moduleVersion}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
      displayName: Setup variables for signing

    # checkout the Compliance repository so it can be used to do the actual signing
    - checkout: ComplianceRepo

    # this the MS authored step  This cert covers MS authored items
    # note that the buildOutputPath (where we get the files to sign)
    # is the same as the signOutputPath in the previous step
    # at the end of this step we will have all the files signed that should be
    # signOutPath is the location which contains the files we will use to make the module
    - template: EsrpSign.yml@ComplianceRepo
      parameters:
        # the folder which contains the binaries to sign
        buildOutputPath: $(signSrcPath)
        # the location to put the signed output
        signOutputPath: $(signOutPath)
        # the certificate ID to use (Authenticode)
        certificateId: "CP-230012"
        pattern: |
          **\*.psd1
          **\*.psm1
        useMinimatch: true

    # Register local folder as PSRepository
    # Then publish-module to that folder 
    - pwsh: |
        $localRepo = "$(Build.SourcesDirectory)/local"  
        New-Item -Path $localRepo -ItemType Directory -Force
        $vstsCommandString = "vso[task.setvariable variable=localRepo]${localRepo}"
        Write-Host "local repo is: " + $vstsCommandString
        Write-Host "##$vstsCommandString"

        Register-PSRepository -Name local -SourceLocation $localRepo
        Publish-Module -Path $(signOutPath) -Repository local
      displayName: Publish module to local repository

    # finally publish the parts of the build which will be used in the next stages
    # if it's not published, the subsequent stages will not be able to access it.
    - publish: "$(Build.SourcesDirectory)/OSS_Microsoft_CompatPowerShellGet"
      artifact: build
      displayName: publish build directory
      
    - pwsh: |
        $nupkgPath = "$(localRepo)"
        $artifactName = "CompatPowerShellGet"
        Write-Host "##vso[artifact.upload containerfolder=$artifactName;artifactname=$artifactName;]$nupkgPath"
      displayName: Upload module artifact

# Now on to the compliance stage
- stage: Compliance
  displayName: Compliance
  dependsOn: Build
  jobs:
  - job: Compliance_Job
    pool:
      name: 1ES
      demands:
      - ImageOverride -equals PSMMS2019-Secure
    steps:
    - checkout: self
    - checkout: ComplianceRepo
    - download: current
      artifact: build

    # use the templates in the compliance repo
    # no assemblies, you should use script-module-compliance template
    - template: script-module-compliance.yml@ComplianceRepo
      parameters:
        # component-governance - the path to sources
        sourceScanPath: '$(Build.SourcesDirectory)/CompatPowerShellGet'
        # TermCheck
        optionsRulesDBPath: ''
        optionsFTPath: ''
        # tsa-upload
        # the compliance scanning must be uploaded, which you need to request
        codeBaseName: 'CompatPowerShellGet_20200201'
        # selections
        APIScan: false # set to false when not using Windows APIs.

- stage: Publish
  displayName: Publish
  dependsOn: Compliance
  pool:
    name: 1ES
    demands:
    - ImageOverride -equals PSMMS2019-Secure
  jobs:
  - job: Publish_Job
    displayName: Build Microsoft.PowerShell.CompatPowerShellGet
    steps:
    - checkout: self

    - task: DownloadPipelineArtifact@2
      displayName: 'Download PowerShellGet module artifacts'
      inputs:
        artifact: CompatPowerShellGet
        patterns: '**/*.nupkg'
        downloadPath: '$(Pipeline.Workspace)/nuget'

    - pwsh: |
        $package = (Get-ChildItem '$(Pipeline.Workspace)/nuget/CompatPowerShellGet.*.nupkg').FullName
        $vstsCommandString = "vso[task.setvariable variable=NugetPkgPath]${package}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
      displayName: 'Capture PowerShellGet module NuGet package path and set environment variable'

    - task: NuGetCommand@2
      displayName: 'Push CompatPowerShellGet module artifacts to PSGallery feed'
      inputs:
        command: push
        packagesToPush: '$(NugetPkgPath)'
        nuGetFeedType: external
        publishFeedCredentials: PSGalleryPush
